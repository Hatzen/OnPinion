{"version":3,"file":"src_components_adminarea_adminarea_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;AAA+B;AACO;AACc;AACF;AACH;AACkB;AAC1D;AACP;AACA;AACA;AACA,YAAY,gDAAmB,CAAC,0DAAI,IAAI,MAAM,iBAAiB;AAC/D,QAAQ,gDAAmB,CAAC,qDAAc,IAAI,qBAAqB;AACnE,YAAY,gDAAmB,CAAC,iEAAW;AAC3C,gBAAgB,gDAAmB,CAAC,gEAAU,IAAI,mCAAmC;AACrF,oBAAoB,gDAAmB,CAAC,2EAAe,IAAI,aAAa;AACxE,gBAAgB,gDAAmB,CAAC,gEAAU,IAAI,qDAAqD;AACvG;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;ACjBc;AACX;AACM;AACM;AACY;AACJ;AACY;AAC1D;AACA;AACA,oCAAoC,2CAAc;AAClD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,gDAAmB,CAAC,sEAAY;AAChD;AACA,gCAAgC,2CAAc;AAC9C;AACA,YAAY,gDAAmB;AAC/B,QAAQ,gDAAmB,CAAC,qDAAI,IAAI,4BAA4B,cAAc,aAAa,wBAAwB;AACnH,6CAA6C,gDAAmB,CAAC,qDAAI,IAAI,6CAA6C;AACtH,gBAAgB,gDAAmB,CAAC,mDAAU,IAAI,0CAA0C;AAC5F,YAAY,gDAAmB,CAAC,qDAAI,IAAI,iCAAiC;AACzE,gBAAgB,gDAAmB,CAAC,gDAAO,IAAI,0BAA0B;AACzE;AACA,iEAAe,kDAAM,IAAI,4DAAY,EAAE,oDAAQ,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;AC5B7B;AACO;AACc;AACF;AACH;AACkB;AACjE;AACA;AACA;AACO;AACP;AACA,YAAY,gDAAmB,CAAC,0DAAI,IAAI,MAAM,iBAAiB;AAC/D,QAAQ,gDAAmB,CAAC,qDAAc,IAAI,iBAAiB,sDAAsD;AACrH,YAAY,gDAAmB,CAAC,iEAAW;AAC3C,gBAAgB,gDAAmB,CAAC,gEAAU,IAAI,mCAAmC;AACrF;AACA;AACA,oBAAoB,gDAAmB,CAAC,2EAAe,IAAI,oBAAoB;AAC/E,gBAAgB,gDAAmB,CAAC,gEAAU,IAAI,mCAAmC;AACrF,gBAAgB,gDAAmB,CAAC,gEAAU,IAAI,qDAAqD;AACvG;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAC1B;AAC2C;AACb;AACuC;AACnB;AAClD;AACO;AACP,IAAI,yEAAsB,CAAC,2DAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8FAA2C;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAmB;AAC/B,QAAQ,gDAAmB,CAAC,4EAAkB,IAAI;AAClD;AACA;AACA,aAAa,oCAAoC,gEAAa,IAAI;AAClE;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;AC1C5B;AACO","sources":["webpack://onpinion/./src/components/adminarea/addCard.tsx","webpack://onpinion/./src/components/adminarea/adminarea.tsx","webpack://onpinion/./src/components/adminarea/surveyCard.tsx","webpack://onpinion/./src/services/firebase/signInScreen.tsx","webpack://onpinion/./src/stores/storeHelper.ts"],"sourcesContent":["import * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea } from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nexport const AddCard = (props) => {\n    const clickEvent = () => {\n        props.navigate('/manage/create');\n    };\n    return (React.createElement(Card, { sx: { maxWidth: 345 } },\n        React.createElement(CardActionArea, { onClick: clickEvent },\n            React.createElement(CardContent, null,\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\" },\n                    React.createElement(FontAwesomeIcon, { icon: 'add' })),\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"div\" }, \"Umfrage erstellen\")))));\n};\nexport default AddCard;\n","import { Grid } from '@mui/material';\nimport React from 'react';\nimport AddCard from './addCard';\nimport SurveyCard from './surveyCard';\nimport { injectClause } from 'stores/storeHelper';\nimport { inject, observer } from 'mobx-react';\nimport SignInScreen from 'services/firebase/signInScreen';\nconst AdminArea = (props) => {\n    // TODO: We cannot use mobx hooks as it calls useEffects. We cannot use setState as the Store is not related to this component...\n    const [loggedIn, setLoggedIn] = React.useState(props.uiStore.loggedInWithEmail);\n    /* const [loggedIn, setLoggedIn] = React.useState(props.uiStore!.loggedInWithEmail)\n    //observe(props.uiStore!.loggedInWithEmail, newValue => setLoggedIn(newValue as any))\n    console.log('Why is this called only once?')\n    useEffect(() => {\n        setLoggedIn(props.uiStore!.loggedInWithEmail)\n    })*/\n    if (!loggedIn) {\n        return (React.createElement(SignInScreen, null));\n    }\n    let [surveys, setSurveys] = React.useState(new Array());\n    props.uiStore.firebaseService.getSurveys().then(setSurveys);\n    return (React.createElement(\"div\", null,\n        React.createElement(Grid, { container: true, spacing: { xs: 2, md: 2 }, columns: { xs: 4, sm: 8, md: 12 } },\n            surveys.map((element, index) => (React.createElement(Grid, { item: true, xs: 2, sm: 2, md: 2, key: index },\n                React.createElement(SurveyCard, { entry: element, navigate: props.navigate })))),\n            React.createElement(Grid, { item: true, xs: 2, sm: 2, md: 2 },\n                React.createElement(AddCard, { navigate: props.navigate })))));\n};\nexport default inject(...injectClause)(observer(AdminArea));\n","import * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea } from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nclass SurveyCardProps {\n    entry;\n}\nexport const SurveyCard = (props) => {\n    const stateText = props.entry.isClosed ? 'Closed' : 'Open';\n    return (React.createElement(Card, { sx: { maxWidth: 345 } },\n        React.createElement(CardActionArea, { onClick: () => { props.navigate('manage/result/' + props.entry.id); } },\n            React.createElement(CardContent, null,\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\" },\n                    props.entry.participations,\n                    \" \",\n                    React.createElement(FontAwesomeIcon, { icon: 'user-check' })),\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\" }, stateText),\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"div\" }, props.entry.name)))));\n};\nexport default SurveyCard;\n","import React from 'react';\n// import auth from 'firebase/auth' // TODO why do we need to use compat here?\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { firebaseConfig } from './firebaseConfig';\n// https://github.com/firebase/firebaseui-web#email-link-authentication\nexport const SignInScreen = () => {\n    firebase.initializeApp(firebaseConfig);\n    // Configure FirebaseUI.\n    const uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n        // signInSuccessUrl: '/manage',\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        // TODO: doesnt work, how to set TenantConfig?\n        buttonColor: '#004A7F',\n        // autoUpgradeAnonymousUsers: true,\n        immediateFederatedRedirect: true,\n        popupMode: true,\n        callbacks: {\n            signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n                console.log('test123');\n                return false;\n            },\n            signInFailure: (error) => {\n                console.log('test123');\n            },\n            uiShown: () => {\n                console.log('test123');\n            }\n        }\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(StyledFirebaseAuth, { uiCallback: () => {\n                console.log('success');\n                return false;\n            }, uiConfig: uiConfig, firebaseAuth: firebase.auth() })));\n};\nexport default SignInScreen;\n","// Must be the same as listed StoreProps props. Cannot be initalized as it is not\nexport const injectClause = ['uiStore'];\n"],"names":[],"sourceRoot":""}