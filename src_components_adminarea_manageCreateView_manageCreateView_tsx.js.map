{"version":3,"file":"src_components_adminarea_manageCreateView_manageCreateView_tsx.js","mappings":"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;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,0DAAa;AACpC,2BAA2B,2EAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,2DAAc;AACrC,2BAA2B,2EAA0B;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,0DAAa;AACpC,2BAA2B,2EAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,0DAAa;AACpC,2BAA2B,0EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,0DAAa;AACpC,2BAA2B,2EAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,0DAAa;AACpC,2BAA2B,2EAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtPO;AACP;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;ACLxB;AACP;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;;;;;;;;;;;;;;ACLvC;AACO","sources":["webpack://onpinion/./src/components/adminarea/manageCreateView/createChoice.tsx","webpack://onpinion/./src/components/adminarea/manageCreateView/createSurveyEntry.tsx","webpack://onpinion/./src/components/adminarea/manageCreateView/manageCreateView.tsx","webpack://onpinion/./src/components/adminarea/testData.ts","webpack://onpinion/./src/model/graphType.ts","webpack://onpinion/./src/model/surveyChoices.ts","webpack://onpinion/./src/stores/storeHelper.ts"],"sourcesContent":["import { Button, FormControl, Input, InputLabel, ListItem } from '@mui/material';\nimport * as React from 'react';\nexport const CreateSurveyChoice = (props) => {\n    const surveyChoice = props.surveyChoice;\n    return (React.createElement(\"div\", null,\n        React.createElement(ListItem, { style: { paddingLeft: '50px' }, divider: true },\n            React.createElement(Button, { onClick: () => {\n                    props.deleteEntryAction(surveyChoice);\n                }, style: { float: 'right' }, variant: 'text' }, \"X\"),\n            React.createElement(FormControl, { style: { marginBottom: '20px' }, fullWidth: true },\n                React.createElement(InputLabel, { id: \"choice-text\" }, \"\\u00DCberschrift:\"),\n                React.createElement(Input, { id: \"choice-text\", onChange: (event) => {\n                        surveyChoice.text = event.target.value;\n                    } })))));\n};\nexport default CreateSurveyChoice;\n","import { Button, FormControl, Input, InputLabel, List, ListItem, ListItemText, MenuItem, Select } from '@mui/material';\nimport * as React from 'react';\nimport { GraphType } from 'model/graphType';\nimport { SurveyChoices } from 'model/surveyChoices';\nimport { SurveyChoice } from 'model/surveyEntry';\nimport CreateSurveyChoice from './createChoice';\nexport const CreateSurveyEntry = (props) => {\n    const [surveyEntry] = React.useState(props.surveyEntry);\n    const [choices, setChoices] = React.useState(surveyEntry.choices);\n    let choicesCount = 1;\n    const createSurveyChoice = () => {\n        const choice = new SurveyChoice();\n        choice.id = 'surveyChoice-' + ++choicesCount;\n        return choice;\n    };\n    const addSurveyChoice = () => {\n        const tmpChoices = choices.concat(createSurveyChoice());\n        setChoices(tmpChoices);\n        surveyEntry.choices = tmpChoices;\n    };\n    const removeSurveyChoiceComponent = (surveyChoice) => {\n        // TODO: This does not set the attribute of surveyEntry, does it?\n        const tmpChoices = choices.filter(entry => entry !== surveyChoice);\n        setChoices(tmpChoices);\n        surveyEntry.choices = tmpChoices;\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(ListItem, { style: { display: 'block', padding: '20px' }, divider: true },\n            React.createElement(Button, { onClick: () => {\n                    props.deleteEntryAction(surveyEntry);\n                }, style: { float: 'right' }, variant: 'text' }, \"X\"),\n            React.createElement(FormControl, { style: { marginBottom: '20px' }, fullWidth: true },\n                React.createElement(InputLabel, { id: \"question\" }, \"\\u00DCberschrift:\"),\n                React.createElement(Input, { id: \"question-input\", onChange: (event) => surveyEntry.question = event.target.value })),\n            React.createElement(FormControl, { style: { marginBottom: '20px' }, fullWidth: true },\n                React.createElement(InputLabel, { id: \"graph-type\" }, \"Umfragetyp\"),\n                React.createElement(Select, { labelId: \"graph-type\", id: \"graph-type-select\", label: \"Umfragetyp\", onChange: (event) => surveyEntry.graphType = event.target.value },\n                    React.createElement(MenuItem, { value: GraphType.BAR }, \"Balken\"),\n                    React.createElement(MenuItem, { value: GraphType.RADAR }, \"Trapez\"),\n                    React.createElement(MenuItem, { value: GraphType.TEXT }, \"Text\"),\n                    React.createElement(MenuItem, { disabled: true, value: 'Plot' }, \"Graph\"),\n                    \" [User can enter 2D Values like year and value]\",\n                    React.createElement(MenuItem, { disabled: true }, \"Kalender\"),\n                    React.createElement(MenuItem, { disabled: true }, \"Multimedia\"))),\n            React.createElement(FormControl, { style: { marginBottom: '20px' }, fullWidth: true },\n                React.createElement(InputLabel, { id: \"choice-type\" }, \"Auswahlm\\u00F6glichkeiten\"),\n                React.createElement(Select, { labelId: 'choice-type', label: \"Auswahltyp\", onChange: (event) => surveyEntry.surveyChoices = event.target.value },\n                    React.createElement(MenuItem, { value: SurveyChoices.MULTISELECT }, \"Mehrfach\"),\n                    React.createElement(MenuItem, { value: SurveyChoices.SINGLESELECT }, \"Eine Option\"),\n                    React.createElement(MenuItem, { value: SurveyChoices.PRIORITY }, \"Priorisieren\"))),\n            React.createElement(List, null,\n                choices.map(entry => {\n                    return (React.createElement(CreateSurveyChoice, { surveyChoice: entry, deleteEntryAction: removeSurveyChoiceComponent, key: 'choice-' + entry.id }));\n                }),\n                React.createElement(ListItem, { divider: true, onClick: addSurveyChoice },\n                    React.createElement(ListItemText, { primary: \"+ Antwort hinzuf\\u00FCgen\" }))))));\n};\nexport default CreateSurveyEntry;\n","import * as React from 'react';\nimport { Button, Checkbox, FormControl, FormControlLabel, FormGroup, Input, InputLabel, List, ListItem, ListItemText, Snackbar } from '@mui/material';\nimport CreateSurveyEntry from './createSurveyEntry';\nimport { SurveyEntry } from 'model/surveyEntry';\nimport { Survey } from 'model/survey';\nimport { injectClause } from 'stores/storeHelper';\nimport { inject, observer } from 'mobx-react';\nimport { testData } from '../testData';\nexport const ManageCreateView = (props) => {\n    const [open, setOpen] = React.useState(false);\n    const [text, setText] = React.useState('');\n    const [survey, setSurvey] = React.useState(new Survey());\n    const [surveyEntries, setSurveyEntries] = React.useState(new Array(new SurveyEntry()));\n    survey.canSeeResult = true;\n    survey.canSkip = true;\n    survey.isClosed = false;\n    survey.createdAt = new Date().getTime();\n    if (process.env.NODE_ENV === 'dev') {\n        // TODO: Remove. Just for creating testdata faster. Currently values are not displayed, but created..\n        React.useEffect(() => {\n            setSurvey(testData);\n            setSurveyEntries(testData.surveyEntries);\n        });\n    }\n    const addSurveyEntryComponent = (surveyEntry) => {\n        setSurveyEntries(surveyEntries.concat(surveyEntry));\n    };\n    const removeSurveyEntryComponent = (surveyEntry) => {\n        setSurveyEntries(surveyEntries.filter(entry => entry !== surveyEntry));\n    };\n    const handleClick = () => {\n        const valid = surveyEntries.find(entry => entry.isValid !== true) == null;\n        if (!valid && survey.name != null && survey.name.length !== 0 && surveyEntries.length > 0) {\n            setText('Bitte fehlende Werte ergänzen.');\n            setOpen(true);\n            return;\n        }\n        survey.surveyEntries = surveyEntries;\n        props.uiStore.firebaseService.addSurvey(survey);\n        setText('Umfrage erfolgeich erstellt.');\n        setOpen(true);\n    };\n    const action = (React.createElement(React.Fragment, null,\n        React.createElement(Button, { color: 'secondary', size: 'small', onClick: () => setOpen(false) }, \"Close\")));\n    // [<Skeleton sx={{ height: 190 }} animation='wave' variant='rectangular' />]\n    return (React.createElement(\"div\", null,\n        React.createElement(FormControl, { style: { marginBottom: '20px' }, fullWidth: true },\n            React.createElement(InputLabel, { id: \"survey-title\" }, \"\\u00DCberschrift:\"),\n            React.createElement(Input, { id: \"survey-title\", onChange: (event) => survey.name = event.target.value })),\n        React.createElement(FormGroup, null,\n            React.createElement(FormControlLabel, { disabled: true, control: React.createElement(Checkbox, { defaultChecked: true }), label: \"\\u00DCberspringen erlauben\" }),\n            React.createElement(FormControlLabel, { disabled: true, control: React.createElement(Checkbox, { defaultChecked: true }), label: \"Ergebnisse Sichtbar\" })),\n        React.createElement(List, null,\n            surveyEntries.map(entry => {\n                return (React.createElement(CreateSurveyEntry, { surveyEntry: entry, deleteEntryAction: removeSurveyEntryComponent, key: 'entry-' + surveyEntries.indexOf(entry) }));\n            }),\n            React.createElement(ListItem, { divider: true, onClick: (event) => addSurveyEntryComponent(new SurveyEntry()) },\n                React.createElement(ListItemText, { primary: \"+ Frage hinzuf\\u00FCgen\" }))),\n        React.createElement(Button, { variant: 'contained', onClick: handleClick }, \"Speichern\"),\n        React.createElement(Snackbar, { open: open, autoHideDuration: 2000, onClose: () => setOpen(false), message: text, action: action })));\n};\nexport default inject(...injectClause)(observer(ManageCreateView));\n","import { GraphType } from 'model/graphType';\nimport { SurveyChoices } from 'model/surveyChoices';\nexport const testData = {\n    id: 'testId',\n    name: 'Allgemeine Zufriedenheits Umfrage',\n    createdAt: -1,\n    participations: 0,\n    canSkip: false,\n    canSeeResult: false,\n    deadline: -1,\n    isClosed: false,\n    surveyEntries: [\n        {\n            id: 'surveyEntry1',\n            question: 'Politisch interessiert',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Ja'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Nein'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry2',\n            question: 'Wie oft schaust du am Tag aufs Handy?',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: '1-2 Mal'\n                },\n                {\n                    id: 'choice-2',\n                    text: '3-10 Mal'\n                },\n                {\n                    id: 'choice-3',\n                    text: '11 und mehr'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry3',\n            question: 'Welche Musikrichtung hörst du?',\n            graphType: GraphType.RADAR,\n            surveyChoices: SurveyChoices.MULTISELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Rock/ Metal'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Hip Hop / Rap'\n                },\n                {\n                    id: 'choice-3',\n                    text: 'Klassisch / Oper'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'Elektronisch'\n                },\n                {\n                    id: 'choice-5',\n                    text: 'Radio'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry4',\n            question: 'Witzigste Erfahrung in der FourEnergy?',\n            graphType: GraphType.TEXT,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: []\n        },\n        {\n            id: 'surveyEntry5',\n            question: 'Was ist dir bei Menschen am wichtigsten?',\n            graphType: GraphType.RADAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Ehrlichkeit'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Witz'\n                },\n                {\n                    id: 'choice-3',\n                    text: 'Verlässlichkeit'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'Respekt'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry6',\n            question: 'Wie regelmäßig nimmst du am News@4E teil?',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Immer'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Noch nie'\n                },\n                {\n                    id: 'choice-3',\n                    text: 'Wenn es zeitlich passt'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'Mal so mal so'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry7',\n            question: 'Was hindert dich am meisten an der Teilnahme?',\n            graphType: GraphType.TEXT,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: []\n        },\n        {\n            id: 'surveyEntry8',\n            question: 'Von wann bis wann ist die beste Zeit?',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: '8-12 Uhr'\n                },\n                {\n                    id: 'choice-2',\n                    text: '12-13 Uhr'\n                },\n                {\n                    id: 'choice-3',\n                    text: '13 - 16 Uhr'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'ab 16 Uhr'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry9',\n            question: 'Was ist deine aktuelle Rolle bei FourEnergy?',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.MULTISELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Tester'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Entwickler'\n                },\n                {\n                    id: 'choice-3',\n                    text: 'Product Owner / Scrum Master'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'Business Analyst'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry10',\n            question: 'Wie ging es dir letztes Jahr?',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Gut'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Ganz ok'\n                },\n                {\n                    id: 'choice-3',\n                    text: 'Mal so mal so'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'Eher nicht so gut'\n                }\n            ]\n        },\n        {\n            id: 'surveyEntry11',\n            question: 'Wie geht es dir dieses Jahr?',\n            graphType: GraphType.BAR,\n            surveyChoices: SurveyChoices.SINGLESELECT,\n            isValid: true,\n            choices: [\n                {\n                    id: 'choice-1',\n                    text: 'Gut'\n                },\n                {\n                    id: 'choice-2',\n                    text: 'Ganz ok'\n                },\n                {\n                    id: 'choice-3',\n                    text: 'Mal so mal so'\n                },\n                {\n                    id: 'choice-4',\n                    text: 'Eher nicht so gut'\n                }\n            ]\n        }\n    ]\n};\n","export var GraphType;\n(function (GraphType) {\n    GraphType[\"RADAR\"] = \"RADAR\";\n    GraphType[\"BAR\"] = \"BAR\";\n    GraphType[\"TEXT\"] = \"TEXT\";\n})(GraphType || (GraphType = {}));\n","export var SurveyChoices;\n(function (SurveyChoices) {\n    SurveyChoices[\"SINGLESELECT\"] = \"SINGLESELECT\";\n    SurveyChoices[\"MULTISELECT\"] = \"MULTISELECT\";\n    SurveyChoices[\"PRIORITY\"] = \"PRIORITY\";\n})(SurveyChoices || (SurveyChoices = {}));\n","// Must be the same as listed StoreProps props. Cannot be initalized as it is not\nexport const injectClause = ['uiStore'];\n"],"names":[],"sourceRoot":""}