{"version":3,"file":"src_components_userarea_resultArea_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAoG;AAC1C;AAC1D;AAC+B;AACI;AACX;AAC4C;AACE;AAChC;AACc;AACP;AACmB;AAChB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,sEAAsE,6DAAU,QAAQ;AACxF;AACA,SAAS,qDAAc,QAAQ,yEAAyB;AACxD;;AAEO,uBAAuB,0DAAM;AACpC;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,4HAA4H,6DAAU,mBAAmB;AACzJ;AACA,CAAC;AACD;AACA;AACA,CAAC,KAAK,8EAAQ;AACd;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,6CAAgB;AAChD,qBAAqB,iEAAa;AAClC;AACA;AACA,GAAG;AACH;AACA,gBAAgB,wDAAY,CAAC,8EAAQ,GAAG;AACxC;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,gBAAgB,mGAA6B;;AAE7C,qBAAqB,8EAAQ,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,sBAAsB,sDAAI,iBAAiB,8EAAQ;AACnD;AACA;AACA;AACA,eAAe,gDAAI;AACnB,GAAG;AACH,CAAC;AACD,KAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,wDAAe;;AAExB;AACA;AACA;AACA,YAAY,yDAAc;;AAE1B;AACA;AACA;AACA,WAAW,2DAAgB;;AAE3B;AACA;AACA;AACA,aAAa,2DAAgB;;AAE7B;AACA;AACA;AACA;AACA,aAAa,gEAAqB;;AAElC;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yDAAc;;AAExB;AACA;AACA;AACA;AACA,aAAa,yDAAc;;AAE3B;AACA;AACA;AACA,MAAM,4DAAmB,EAAE,0DAAiB,CAAC,4DAAmB,EAAE,yDAAc,EAAE,2DAAgB,EAAE,yDAAc,KAAK,yDAAc,EAAE,2DAAgB;;AAEvJ;AACA;AACA;AACA;AACA,WAAW,4DAEC,EAAE,wDAAe,gIAAgI,2DAAgB;;AAE7K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAET;AACT,EAAE,EAAE,CAAM;AACV,iEAAe,UAAU;;;;;;;;;;;;;;;;;ACvNgD;AAClE;AACP,SAAS,qDAAoB;AAC7B;AACA,0BAA0B,qDAAsB;AAChD,iEAAe,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;ACLmB;AACL;AACpB;AACmB;AACG;AACE;AACZ;AAC/B;AACP,YAAY,WAAW,EAAE,2DAAS;AAClC,IAAI,4CAAe;AACnB;AACA,KAAK,OAAO;AACZ;AACA,oDAAoD,2CAAc;AAClE,0CAA0C,2CAAc,KAAK,0DAAW;AACxE,IAAI,4CAAe;AACnB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,CAAC,qDAAU,IAAI,SAAS,gFAAgF,uDAAuD;AAClM;AACA,YAAY,gDAAmB,UAAU,SAAS,kCAAkC;AACpF,QAAQ,gDAAmB,CAAC,qDAAU,IAAI,qDAAqD;AAC/F,QAAQ,gDAAmB,CAAC,qDAAU,IAAI,qDAAqD;AAC/F;AACA;AACA;AACA,QAAQ,gDAAmB,CAAC,mDAAU,IAAI,0BAA0B;AACpE,QAAQ,gDAAmB,UAAU,SAAS,kEAAkE;AAChH,YAAY,gDAAmB,CAAC,qDAAM,IAAI,mDAAmD;AAC7F,YAAY,gDAAmB,CAAC,qDAAM,IAAI,SAAS,gBAAgB,iDAAiD;AACpH;AACA,iEAAe,kDAAM,IAAI,4DAAY,EAAE,oDAAQ,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;AChD9B;AACa;AACW;AACI;AACE;AACtD;AACP,0CAA0C,2CAAc;AACxD;AACA,IAAI,4CAAe,SAAS,oCAAoC;AAChE;AACA;AACA,aAAa,0DAAa;AAC1B,mCAAmC,gEAAS;AAC5C;AACA,aAAa,4DAAe;AAC5B,mCAAmC,oEAAW;AAC9C;AACA,aAAa,2DAAc;AAC3B,mCAAmC,sEAAc;AACjD;AACA;AACA,YAAY,gDAAmB,UAAU,SAAS,sCAAsC;AACxF,QAAQ,gDAAmB,UAAU,SAAS,mBAAmB;AACjE;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;ACxBgB;AACX;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAmB,CAAC,oDAAa,IAAI,oFAAoF,2CAA2C,8BAA8B,gBAAgB,gBAAgB,2BAA2B,YAAY,gBAAgB;AACxS;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;;;;;;;;;;;;;;;;;ACtD8C;AACf;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,gDAAmB,CAAC,wDAAe,IAAI,yFAAyF,0CAA0C,iBAAiB,eAAe,gDAAgD,qBAAqB,+BAA+B,gBAAgB;AAC9U;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;;;;;;;;;;;;;;;;;;;AC/C8E;AAC/C;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,qDAAqD,gDAAmB,CAAC,qDAAI,IAAI,oBAAoB;AACxI,YAAY,gDAAmB,CAAC,qDAAc;AAC9C,gBAAgB,gDAAmB,CAAC,qDAAW;AAC/C,oBAAoB,gDAAmB,CAAC,qDAAU,IAAI,wDAAwD;AAC9G;AACA;;;;;;;;;;;;;;;ACjBO;AACP;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;ACL/B;AACO","sources":["webpack://onpinion/./node_modules/@mui/material/Typography/Typography.js","webpack://onpinion/./node_modules/@mui/material/Typography/typographyClasses.js","webpack://onpinion/./src/components/userarea/resultArea.tsx","webpack://onpinion/./src/components/userarea/resultView.tsx","webpack://onpinion/./src/components/userarea/viewHolder/barViewHolder.tsx","webpack://onpinion/./src/components/userarea/viewHolder/radarViewHolder.tsx","webpack://onpinion/./src/components/userarea/viewHolder/textViewHolder.tsx","webpack://onpinion/./src/model/graphType.ts","webpack://onpinion/./src/stores/storeHelper.ts"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"align\", \"className\", \"component\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses(slots, getTypographyUtilityClass, classes);\n};\n\nexport const TypographyRoot = styled('span', {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  margin: 0\n}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {\n  textAlign: ownerState.align\n}, ownerState.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, ownerState.gutterBottom && {\n  marginBottom: '0.35em'\n}, ownerState.paragraph && {\n  marginBottom: 16\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6\n\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\n\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\n\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n  const color = transformDeprecatedColors(themeProps.color);\n  const props = extendSxProp(_extends({}, themeProps, {\n    color\n  }));\n\n  const {\n    align = 'inherit',\n    className,\n    component,\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    align,\n    color,\n    className,\n    component,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default Typography;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTypographyUtilityClass(slot) {\n  return generateUtilityClass('MuiTypography', slot);\n}\nconst typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);\nexport default typographyClasses;","import { Button, Typography } from '@mui/material';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { SurveyEntry } from 'model/surveyEntry';\nimport { injectClause } from 'stores/storeHelper';\nimport ResultView from './resultView';\nexport const ResultArea = (props) => {\n    const { surveyId } = useParams();\n    React.useEffect(() => {\n        props.uiStore.watchSurvey(surveyId);\n    }, []); // empty array so it is called only once.\n    const survey = props.uiStore.currentSurvey;\n    const [surveyEntryIndex, setSurveyEntryIndex] = React.useState(0);\n    const [surveyEntry, setSurveyEntry] = React.useState(new SurveyEntry());\n    React.useEffect(() => {\n        setSurveyEntry(survey.surveyEntries[surveyEntryIndex]);\n    });\n    const clickPreviousEntry = (event) => {\n        setSurveyEntryIndex(surveyEntryIndex - 1);\n        const surveyStart = surveyEntryIndex <= 0;\n        if (surveyStart) {\n            return;\n        }\n        setSurveyEntry(survey.surveyEntries[surveyEntryIndex]);\n    };\n    const clickNextEntry = (event) => {\n        setSurveyEntryIndex(surveyEntryIndex + 1);\n        const surveyFinished = surveyEntryIndex >= survey.surveyEntries.length - 1;\n        if (surveyFinished) {\n            return;\n        }\n        setSurveyEntry(survey.surveyEntries[surveyEntryIndex]);\n    };\n    if (surveyEntry == null) {\n        return (React.createElement(Typography, { style: { textAlign: 'center', verticalAlign: 'center', position: 'relative', top: '40%' }, gutterBottom: true, variant: \"h3\", component: \"div\" }, \"Daten werden geladen..\"));\n    }\n    return (React.createElement(\"div\", { style: { width: '800px', margin: 'auto' } },\n        React.createElement(Typography, { gutterBottom: true, variant: \"h3\", component: \"div\" }, survey.name),\n        React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"div\" },\n            surveyEntryIndex + 1,\n            \". \",\n            surveyEntry.question),\n        React.createElement(ResultView, { surveyEntry: surveyEntry }),\n        React.createElement(\"div\", { style: { position: 'fixed', bottom: 0, left: 20, right: 20, height: 125 } },\n            React.createElement(Button, { onClick: clickPreviousEntry, variant: \"contained\" }, \"Zur\\u00FCck\"),\n            React.createElement(Button, { style: { float: 'right' }, onClick: clickNextEntry, variant: \"contained\" }, \"Weiter\"))));\n};\nexport default inject(...injectClause)(observer(ResultArea));\n","import * as React from 'react';\nimport { GraphType } from 'model/graphType';\nimport { BarHolder } from './viewHolder/barViewHolder';\nimport { RadarHolder } from './viewHolder/radarViewHolder';\nimport { TextViewHolder } from './viewHolder/textViewHolder';\nexport const ResultView = (props) => {\n    const [surveyEntry, setSurveyEntry] = React.useState(props.surveyEntry);\n    // Keep prop synced. https://stackoverflow.com/a/54568167/8524651\n    React.useEffect(() => { setSurveyEntry(props.surveyEntry); }, [props.surveyEntry]);\n    let CurrentComponent;\n    switch (surveyEntry.graphType) {\n        case GraphType.BAR:\n            CurrentComponent = new BarHolder(surveyEntry).bar;\n            break;\n        case GraphType.RADAR:\n            CurrentComponent = new RadarHolder(surveyEntry).radar;\n            break;\n        case GraphType.TEXT:\n            CurrentComponent = new TextViewHolder(surveyEntry).cards;\n            break;\n    }\n    return (React.createElement(\"div\", { style: { width: '900px', minHeight: '600px' } },\n        React.createElement(\"div\", { style: { height: '600px' } }, CurrentComponent)));\n};\nexport default ResultView;\n","import { ResponsiveBar } from '@nivo/bar';\nimport * as React from 'react';\nexport class BarHolder {\n    keyValueMap = {};\n    constructor(surveyEntry) {\n        this.keyValueMap = {};\n        if (surveyEntry.surveyAnswers == null) {\n            return;\n        }\n        // TODO: surveyEntry.surveyAnswers? we could work around optional with Partitial constructor within FirebaseService to init Arrays..\n        Object.values(surveyEntry.surveyAnswers).forEach(answer => {\n            const key = surveyEntry.choices.find(choice => choice.id === answer.choice).text;\n            this.keyValueMap[key] = (this.keyValueMap[key] || 0) + 1;\n        });\n    }\n    get barData() {\n        return [\n            this.keyValueMap\n        ];\n    }\n    get bar() {\n        // https://nivo.rocks/bar/\n        return React.createElement(ResponsiveBar, { data: this.barData, keys: Object.keys(this.keyValueMap), indexBy: \"Wahl\", margin: { top: 50, right: 130, bottom: 50, left: 60 }, padding: 0.3, valueScale: { type: 'linear' }, indexScale: { type: 'band', round: true }, colors: { scheme: 'nivo' }, borderColor: {\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        1.6\n                    ]\n                ]\n            }, axisTop: null, axisRight: null, axisBottom: {\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'answer',\n                legendPosition: 'middle',\n                legendOffset: 32\n            }, axisLeft: {\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Anzahl',\n                legendPosition: 'middle',\n                legendOffset: -40\n            }, labelSkipWidth: 12, labelSkipHeight: 12, labelTextColor: {\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        1.6\n                    ]\n                ]\n            }, role: \"application\" });\n    }\n}\n","import { ResponsiveRadar } from '@nivo/radar';\nimport * as React from 'react';\nexport class RadarHolder {\n    indexBy = 'choice';\n    keyValueMap = {};\n    constructor(surveyEntry) {\n        this.keyValueMap = {};\n        if (surveyEntry.surveyAnswers == null) {\n            return;\n        }\n        // TODO: surveyEntry.surveyAnswers? (?=Optional..) we could work around optional with Partitial constructor within FirebaseService to init Arrays..\n        Object.values(surveyEntry.surveyAnswers).forEach(answer => {\n            const key = surveyEntry.choices.find(choice => choice.id === answer.choice).text;\n            this.keyValueMap[key] = (this.keyValueMap[key] || 0) + 1;\n        });\n    }\n    get data() {\n        return Object.entries(this.keyValueMap).map(([choiceText, choiceCount]) => {\n            return {\n                'choice': choiceText,\n                'Votes': choiceCount\n            };\n        });\n    }\n    get radar() {\n        return (React.createElement(ResponsiveRadar, { data: this.data, keys: ['Votes'], indexBy: this.indexBy, valueFormat: '>-.2f', margin: { top: 70, right: 80, bottom: 40, left: 80 }, borderColor: { from: 'color' }, gridLabelOffset: 36, dotSize: 10, dotColor: { theme: 'background' }, dotBorderWidth: 2, colors: { scheme: 'nivo' }, blendMode: 'multiply', motionConfig: 'wobbly', legends: [\n                {\n                    anchor: 'top-left',\n                    direction: 'column',\n                    translateX: -50,\n                    translateY: -40,\n                    itemWidth: 80,\n                    itemHeight: 20,\n                    itemTextColor: '#999',\n                    symbolSize: 12,\n                    symbolShape: 'circle',\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemTextColor: '#000'\n                            }\n                        }\n                    ]\n                }\n            ] }));\n    }\n}\n","import { Card, CardActionArea, CardContent, Typography } from '@mui/material';\nimport * as React from 'react';\nexport class TextViewHolder {\n    comments = [];\n    constructor(surveyEntry) {\n        if (surveyEntry.surveyAnswers == null) {\n            return;\n        }\n        this.comments = Object.values(surveyEntry.surveyAnswers)\n            .map(answer => answer.choice);\n    }\n    get cards() {\n        return (React.createElement(\"div\", null, this.comments.map((element, index) => (React.createElement(Card, { key: Math.random() },\n            React.createElement(CardActionArea, null,\n                React.createElement(CardContent, null,\n                    React.createElement(Typography, { gutterBottom: true, variant: \"body1\", component: \"div\" }, element))))))));\n    }\n}\n","export var GraphType;\n(function (GraphType) {\n    GraphType[\"RADAR\"] = \"RADAR\";\n    GraphType[\"BAR\"] = \"BAR\";\n    GraphType[\"TEXT\"] = \"TEXT\";\n})(GraphType || (GraphType = {}));\n","// Must be the same as listed StoreProps props. Cannot be initalized as it is not\nexport const injectClause = ['uiStore'];\n"],"names":[],"sourceRoot":""}