{"version":3,"file":"src_components_userarea_userarea_tsx.js","mappings":"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ACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,gDAAmB,CAAC,wDAAe,IAAI,yFAAyF,0CAA0C,iBAAiB,eAAe,gDAAgD,qBAAqB,+BAA+B,gBAAgB;AAC9U;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;;;;;;;;;;;;;;;;;;;AC/C8E;AAC/C;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,qDAAqD,gDAAmB,CAAC,qDAAI,IAAI,oBAAoB;AACxI,YAAY,gDAAmB,CAAC,qDAAc;AAC9C,gBAAgB,gDAAmB,CAAC,qDAAW;AAC/C,oBAAoB,gDAAmB,CAAC,qDAAU,IAAI,wDAAwD;AAC9G;AACA;;;;;;;;;;;;;;;ACjBO;AACP;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;ACLxB;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLO;AACP;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;;;;;;;;;;;;;;ACLvC;AACO","sources":["webpack://onpinion/./src/components/userarea/participationInputView.tsx","webpack://onpinion/./src/components/userarea/resultView.tsx","webpack://onpinion/./src/components/userarea/userarea.tsx","webpack://onpinion/./src/components/userarea/viewHolder/barViewHolder.tsx","webpack://onpinion/./src/components/userarea/viewHolder/radarViewHolder.tsx","webpack://onpinion/./src/components/userarea/viewHolder/textViewHolder.tsx","webpack://onpinion/./src/model/graphType.ts","webpack://onpinion/./src/model/surveyAnswer.ts","webpack://onpinion/./src/model/surveyChoices.ts","webpack://onpinion/./src/stores/storeHelper.ts"],"sourcesContent":["import * as React from 'react';\nimport { SurveyChoices } from 'model/surveyChoices';\nimport { GraphType } from 'model/graphType';\nimport { Checkbox, FormControlLabel, Radio, RadioGroup, TextareaAutosize } from '@mui/material';\nimport { SurveyAnswer } from 'model/surveyAnswer';\nimport { injectClause } from 'stores/storeHelper';\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react-lite';\nexport const ParticipationInputView = (props) => {\n    const [surveyEntry, setSurveyEntry] = React.useState(props.surveyEntry);\n    // Keep prop synced. https://stackoverflow.com/a/54568167/8524651\n    React.useEffect(() => { setSurveyEntry(props.surveyEntry); }, [props.surveyEntry]);\n    const answer = new SurveyAnswer();\n    const handleChange = (event) => {\n        const choiceId = event.target.value;\n        answer.id = 'dummyId';\n        answer.value = null;\n        answer.choice = choiceId;\n        answer.user = props.uiStore.userId;\n        props.setAnswer(answer);\n    };\n    // https://stackoverflow.com/a/44078785/8524651\n    const generateUUID = () => {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\n    };\n    let textArea = (React.createElement(\"div\", null));\n    let radioGroup = (React.createElement(\"div\", null));\n    if (surveyEntry.graphType === GraphType.TEXT) {\n        textArea = (React.createElement(TextareaAutosize, { style: { width: 500, height: 200 }, onChange: handleChange, minRows: 5, placeholder: \"Hier den Text eingeben..\" }));\n    }\n    else {\n        radioGroup = (React.createElement(RadioGroup, null, surveyEntry.choices?.map(choice => {\n            const key = 'input-field-' + surveyEntry.choices.indexOf(choice) + surveyEntry.question + generateUUID() + Math.random();\n            if (surveyEntry.surveyChoices === SurveyChoices.SINGLESELECT) {\n                return React.createElement(FormControlLabel, { key: key, onChange: handleChange, value: choice.id, control: React.createElement(Radio, null), label: choice.text });\n            }\n            else if (surveyEntry.surveyChoices === SurveyChoices.MULTISELECT) {\n                return React.createElement(FormControlLabel, { key: key, onChange: handleChange, value: choice.id, control: React.createElement(Checkbox, null), label: choice.text });\n            }\n        })));\n    }\n    return (React.createElement(\"div\", { style: { minHeight: '500px', display: 'block' } },\n        textArea,\n        radioGroup));\n};\nexport default inject(...injectClause)(observer(ParticipationInputView));\n","import * as React from 'react';\nimport { GraphType } from 'model/graphType';\nimport { BarHolder } from './viewHolder/barViewHolder';\nimport { RadarHolder } from './viewHolder/radarViewHolder';\nimport { TextViewHolder } from './viewHolder/textViewHolder';\nexport const ResultView = (props) => {\n    const [surveyEntry, setSurveyEntry] = React.useState(props.surveyEntry);\n    // Keep prop synced. https://stackoverflow.com/a/54568167/8524651\n    React.useEffect(() => { setSurveyEntry(props.surveyEntry); }, [props.surveyEntry]);\n    let CurrentComponent;\n    switch (surveyEntry.graphType) {\n        case GraphType.BAR:\n            CurrentComponent = new BarHolder(surveyEntry).bar;\n            break;\n        case GraphType.RADAR:\n            CurrentComponent = new RadarHolder(surveyEntry).radar;\n            break;\n        case GraphType.TEXT:\n            CurrentComponent = new TextViewHolder(surveyEntry).cards;\n            break;\n    }\n    return (React.createElement(\"div\", { style: { width: '900px', minHeight: '600px', position: 'absolute', top: '10%', left: 'calc(50% - 450px)', right: '50%' } },\n        React.createElement(\"div\", { style: { height: '600px' } }, CurrentComponent)));\n};\nexport default ResultView;\n","import { Button, Typography } from '@mui/material';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { SurveyChoices } from 'model/surveyChoices';\nimport { SurveyEntry } from 'model/surveyEntry';\nimport { injectClause } from 'stores/storeHelper';\nimport ParticipationInputView from './participationInputView';\nimport ResultView from './resultView';\nexport const UserArea = (props) => {\n    const { surveyId } = useParams();\n    React.useEffect(() => {\n        props.uiStore.watchSurvey(surveyId);\n    }, []); // empty array so it is called only once.\n    const survey = props.uiStore.currentSurvey;\n    let currentAnswer = [];\n    const [surveyEntryIndex, setSurveyEntryIndex] = React.useState(0);\n    const [surveyEntry, setSurveyEntry] = React.useState(new SurveyEntry());\n    React.useEffect(() => {\n        setSurveyEntry(survey.surveyEntries[surveyEntryIndex]);\n    });\n    const [showResult, setShowResult] = React.useState(false);\n    const clickNextEntry = (event) => {\n        currentAnswer.forEach(answer => props.uiStore.addAnswer(surveyEntry, answer));\n        setSurveyEntryIndex(surveyEntryIndex + 1);\n        const surveyFinished = surveyEntryIndex >= survey.surveyEntries.length - 1;\n        if (surveyFinished) {\n            return;\n        }\n        setSurveyEntry(survey.surveyEntries[surveyEntryIndex]);\n        currentAnswer = [];\n    };\n    const clickShowResult = (event) => {\n        setShowResult(!showResult);\n    };\n    const setAnswer = (surveyAnswer) => {\n        if (surveyEntry.surveyChoices === SurveyChoices.SINGLESELECT) {\n            currentAnswer = [surveyAnswer];\n        }\n        else if (surveyEntry.surveyChoices === SurveyChoices.MULTISELECT) {\n            currentAnswer.push(surveyAnswer);\n        }\n    };\n    if (surveyEntry == null) {\n        return (React.createElement(Typography, { style: { textAlign: 'center', verticalAlign: 'center', position: 'relative', top: '40%' }, gutterBottom: true, variant: \"h3\", component: \"div\" }, \"Daten werden geladen..\"));\n    }\n    const surveyFinished = surveyEntryIndex >= survey.surveyEntries.length - 1;\n    if (surveyFinished) {\n        return (React.createElement(Typography, { style: { textAlign: 'center', verticalAlign: 'center', position: 'relative', top: '40%' }, gutterBottom: true, variant: \"h3\", component: \"div\" }, \"Vielen Dank f\\u00FCr die Teilnahme.\"));\n    }\n    let content = React.createElement(ParticipationInputView, { setAnswer: setAnswer, surveyEntry: surveyEntry });\n    if (showResult) {\n        content = React.createElement(ResultView, { surveyEntry: surveyEntry });\n    }\n    return (React.createElement(\"div\", { style: { width: '800px', margin: 'auto' } },\n        React.createElement(Typography, { gutterBottom: true, variant: \"h3\", component: \"div\" }, survey.name),\n        React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"div\" },\n            surveyEntryIndex + 1,\n            \". \",\n            surveyEntry.question),\n        content,\n        React.createElement(\"div\", { style: { position: 'fixed', bottom: 0, left: 20, right: 20, height: 125 } },\n            React.createElement(Button, { onClick: clickShowResult, variant: \"contained\" }, \"Ergebnisse anzeigen\"),\n            React.createElement(Button, { style: { float: 'right' }, onClick: clickNextEntry, variant: \"contained\" }, \"Weiter\"))));\n};\nexport default inject(...injectClause)(observer(UserArea));\n","import { ResponsiveBar } from '@nivo/bar';\nimport * as React from 'react';\nexport class BarHolder {\n    keyValueMap = {};\n    constructor(surveyEntry) {\n        this.keyValueMap = {};\n        if (surveyEntry.surveyAnswers == null) {\n            return;\n        }\n        // TODO: surveyEntry.surveyAnswers? we could work around optional with Partitial constructor within FirebaseService to init Arrays..\n        Object.values(surveyEntry.surveyAnswers).forEach(answer => {\n            const key = surveyEntry.choices.find(choice => choice.id === answer.choice).text;\n            this.keyValueMap[key] = (this.keyValueMap[key] || 0) + 1;\n        });\n    }\n    get barData() {\n        return [\n            this.keyValueMap\n        ];\n    }\n    get bar() {\n        // https://nivo.rocks/bar/\n        return React.createElement(ResponsiveBar, { data: this.barData, keys: Object.keys(this.keyValueMap), indexBy: \"Wahl\", margin: { top: 50, right: 130, bottom: 50, left: 60 }, padding: 0.3, valueScale: { type: 'linear' }, indexScale: { type: 'band', round: true }, colors: { scheme: 'nivo' }, borderColor: {\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        1.6\n                    ]\n                ]\n            }, axisTop: null, axisRight: null, axisBottom: {\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'answer',\n                legendPosition: 'middle',\n                legendOffset: 32\n            }, axisLeft: {\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Anzahl',\n                legendPosition: 'middle',\n                legendOffset: -40\n            }, labelSkipWidth: 12, labelSkipHeight: 12, labelTextColor: {\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        1.6\n                    ]\n                ]\n            }, role: \"application\" });\n    }\n}\n","import { ResponsiveRadar } from '@nivo/radar';\nimport * as React from 'react';\nexport class RadarHolder {\n    indexBy = 'choice';\n    keyValueMap = {};\n    constructor(surveyEntry) {\n        this.keyValueMap = {};\n        if (surveyEntry.surveyAnswers == null) {\n            return;\n        }\n        // TODO: surveyEntry.surveyAnswers? (?=Optional..) we could work around optional with Partitial constructor within FirebaseService to init Arrays..\n        Object.values(surveyEntry.surveyAnswers).forEach(answer => {\n            const key = surveyEntry.choices.find(choice => choice.id === answer.choice).text;\n            this.keyValueMap[key] = (this.keyValueMap[key] || 0) + 1;\n        });\n    }\n    get data() {\n        return Object.entries(this.keyValueMap).map(([choiceText, choiceCount]) => {\n            return {\n                'choice': choiceText,\n                'Votes': choiceCount\n            };\n        });\n    }\n    get radar() {\n        return (React.createElement(ResponsiveRadar, { data: this.data, keys: ['Votes'], indexBy: this.indexBy, valueFormat: '>-.2f', margin: { top: 70, right: 80, bottom: 40, left: 80 }, borderColor: { from: 'color' }, gridLabelOffset: 36, dotSize: 10, dotColor: { theme: 'background' }, dotBorderWidth: 2, colors: { scheme: 'nivo' }, blendMode: 'multiply', motionConfig: 'wobbly', legends: [\n                {\n                    anchor: 'top-left',\n                    direction: 'column',\n                    translateX: -50,\n                    translateY: -40,\n                    itemWidth: 80,\n                    itemHeight: 20,\n                    itemTextColor: '#999',\n                    symbolSize: 12,\n                    symbolShape: 'circle',\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemTextColor: '#000'\n                            }\n                        }\n                    ]\n                }\n            ] }));\n    }\n}\n","import { Card, CardActionArea, CardContent, Typography } from '@mui/material';\nimport * as React from 'react';\nexport class TextViewHolder {\n    comments = [];\n    constructor(surveyEntry) {\n        if (surveyEntry.surveyAnswers == null) {\n            return;\n        }\n        this.comments = Object.values(surveyEntry.surveyAnswers)\n            .map(answer => answer.choice);\n    }\n    get cards() {\n        return (React.createElement(\"div\", null, this.comments.map((element, index) => (React.createElement(Card, { key: Math.random() },\n            React.createElement(CardActionArea, null,\n                React.createElement(CardContent, null,\n                    React.createElement(Typography, { gutterBottom: true, variant: \"body1\", component: \"div\" }, element))))))));\n    }\n}\n","export var GraphType;\n(function (GraphType) {\n    GraphType[\"RADAR\"] = \"RADAR\";\n    GraphType[\"BAR\"] = \"BAR\";\n    GraphType[\"TEXT\"] = \"TEXT\";\n})(GraphType || (GraphType = {}));\n","export class SurveyAnswer {\n    id;\n    choice;\n    user;\n    value;\n}\n","export var SurveyChoices;\n(function (SurveyChoices) {\n    SurveyChoices[\"SINGLESELECT\"] = \"SINGLESELECT\";\n    SurveyChoices[\"MULTISELECT\"] = \"MULTISELECT\";\n    SurveyChoices[\"PRIORITY\"] = \"PRIORITY\";\n})(SurveyChoices || (SurveyChoices = {}));\n","// Must be the same as listed StoreProps props. Cannot be initalized as it is not\nexport const injectClause = ['uiStore'];\n"],"names":[],"sourceRoot":""}